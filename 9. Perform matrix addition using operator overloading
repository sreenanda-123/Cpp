#include <iostream>
using namespace std;

class Matrix {
    int rows, cols;
    int **data;

public:
    
    Matrix(int r, int c) {
        rows = r;
        cols = c;

  
        data = new int*[rows];
        for (int i = 0; i < rows; i++) {
            data[i] = new int[cols];
        }
    }

    
    ~Matrix() {
        for (int i = 0; i < rows; i++) {
            delete[] data[i];
        }
        delete[] data;
    }

    
    void input() {
        cout << "Enter elements for " << rows << "x" << cols << " matrix:\n";
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cin >> data[i][j];
            }
        }
    }

  
    void display() const {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cout << data[i][j] << " ";
            }
            cout << endl;
        }
    }

  
    Matrix operator+(const Matrix &m) {
        if (rows != m.rows || cols != m.cols) {
            cout << "Matrices dimensions do not match for addition.\n";
            // Returning empty matrix (0x0) as an error indicator
            return Matrix(0, 0);
        }

        Matrix temp(rows, cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                temp.data[i][j] = data[i][j] + m.data[i][j];
            }
        }
        return temp;
    }
};

int main() {
    int r, c;

    cout << "Enter number of rows: ";
    cin >> r;
    cout << "Enter number of columns: ";
    cin >> c;

    Matrix m1(r, c);
    Matrix m2(r, c);

    cout << "Input matrix 1:\n";
    m1.input();

    cout << "Input matrix 2:\n";
    m2.input();

    Matrix sum = m1 + m2;

    cout << "Sum of matrices:\n";
    sum.display();

    return 0;
}
